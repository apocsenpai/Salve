generator client {
  provider = "prisma-client-js"

  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  extensions = [postgis(version: "3.3.3")]
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  Profile   Profile?

  @@map("users")
}

model Profile {
  id               Int                @id @default(autoincrement())
  fullName         String
  gender           Gender
  birthday         DateTime
  coins            Decimal
  createdAt        DateTime           @default(now())
  cpf              String             @unique
  phoneNumber      String
  userId           Int                @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProfileToAddress ProfileToAddress[]
  Provider         Save[]             @relation("provider")
  Requester        Save[]             @relation("requester")
  ProviderChat     Chat[]             @relation("provider")
  RequesterChat    Chat[]             @relation("requester")

  @@map("profiles")
}

model ProfileToAddress {
  profileId Int
  addressId Int
  nickname  String
  createdAt DateTime @default(now())
  address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, addressId])
  @@map("profiles_addresses")
}

model Address {
  id           Int                                  @id @default(autoincrement())
  neighborhood String
  street       String
  number       String
  complement   String?
  createdAt    DateTime                             @default(now())
  cep          String
  city         String
  state        String
  latitude     Float
  longitude    Float
  geolocation  Unsupported("geometry(Point, 4326)")

  ProfileToAddress ProfileToAddress[]
  Save             Save[]

  @@index([geolocation], map: "address_idx", type: Gist)
  @@map("addresses")
}

model Save {
  id          Int      @id @default(autoincrement())
  requesterId Int
  providerId  Int?
  categoryId  Int
  addressId   Int
  ratingsId   Int?     @unique
  status      Status   @default(CREATED)
  createdAt   DateTime @default(now())
  description String

  address   Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  category  SaveCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  provider  Profile?     @relation("provider", fields: [providerId], references: [id], onDelete: Cascade)
  rating    Rating?      @relation(fields: [ratingsId], references: [id], onDelete: Cascade)
  requester Profile      @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)

  Chat Chat[]

  @@map("saves")
}

model Chat {
  id           Int      @id @default(autoincrement())
  requesterId  Int
  providerId   Int
  saveId       Int
  acceptedSave Boolean  @default(false)
  createdAt    DateTime @default(now())

  requester Profile @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)
  provider  Profile @relation("provider", fields: [providerId], references: [id], onDelete: Cascade)
  save      Save    @relation(fields: [saveId], references: [id], onDelete: Cascade)

  messages Message[] @relation("messages")

  @@unique([saveId, providerId])
  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  chatId    Int
  message   String
  createdAt DateTime @default(now())

  chat Chat @relation("messages", fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Rating {
  id               Int      @id @default(autoincrement())
  request_rating   Int
  provision_rating Int?
  createdAt        DateTime @default(now())
  Save             Save?

  @@map("ratings")
}

model SaveCategory {
  id        Int        @id @default(autoincrement())
  name      Categories
  cost      Int
  createdAt DateTime   @default(now())
  Save      Save[]

  @@map("saves_categories")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum Gender {
  M
  F
  NB
  OT
  NI
}

enum Categories {
  SOFT
  MEDIUM
  HARD
}

enum Status {
  CREATED
  IN_PROGRESS
  COMPLETED
}
