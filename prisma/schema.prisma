// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  Profile   Profile?

  @@map("users")
}

model Profile {
  id               Int                @id @default(autoincrement())
  fullName         String
  cpf              String             @unique
  gender           Gender
  birthday         DateTime
  phoneNumber      String
  userId           Int                @unique
  coins            Decimal
  createdAt        DateTime           @default(now())
  ProfileToAddress ProfileToAddress[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Provider  Save[] @relation("provider")
  Requester Save[] @relation("requester")

  @@map("profiles")
}

model ProfileToAddress {
  profileId Int
  addressId Int
  nickname  String
  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@id([profileId, addressId])
  @@map("profiles_addresses")
}

model Address {
  id           Int      @id @default(autoincrement())
  cep          String
  neighborhood String
  street       String
  number       String
  complement   String?
  city         String
  state        String
  latitude     Decimal
  longitude    Decimal
  createdAt    DateTime @default(now())

  ProfileToAddress ProfileToAddress[]
  Save             Save[]

  @@map("addresses")
}

model Save {
  id          Int      @id @default(autoincrement())
  requesterId Int
  providerId  Int?
  description String
  categoryId  Int
  addressId   Int
  ratingsId   Int?     @unique
  status      Status   @default(CREATED)
  createdAt   DateTime @default(now())

  requester Profile      @relation("requester", fields: [requesterId], references: [id])
  provider  Profile?     @relation("provider", fields: [providerId], references: [id])
  category  SaveCategory @relation(fields: [categoryId], references: [id])
  address   Address      @relation(fields: [addressId], references: [id])
  rating    Rating?      @relation(fields: [ratingsId], references: [id])

  @@map("saves")
}

model Rating {
  id               Int      @id @default(autoincrement())
  request_rating   Int
  provision_rating Int
  createdAt        DateTime @default(now())

  Save Save?

  @@map("ratings")
}

model SaveCategory {
  id        Int        @id @default(autoincrement())
  name      Categories
  cost      Int
  createdAt DateTime   @default(now())

  Save Save[]

  @@map("saves_categories")
}

enum Gender {
  M
  F
  NB
  OT
  NI
}

enum Categories {
  SOFT
  MEDIUM
  HARD
}

enum Status {
  CREATED
  IN_PROGRESS
  COMPLETED
}
